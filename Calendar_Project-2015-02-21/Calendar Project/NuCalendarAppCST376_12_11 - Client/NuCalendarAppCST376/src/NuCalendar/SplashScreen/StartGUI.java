/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package NuCalendar.SplashScreen;

import NuCalendar.TableGUI.ConnectionDialog;
import NuCalendar.TableGUI.LogInDialog;
import NuCalendar.TableGUI.MainCalendarWindow;
import NuCalendar.TableGUI.UpdateThread;
import java.io.File;
import java.io.OutputStreamWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.util.Scanner;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;

/**
 *
 * @author Tahajin
 */
public class StartGUI extends javax.swing.JFrame {

    /**
     * Creates new form StartGUI
     */
    private static InetAddress serverIP;
    private static int serverPort;
    private static Socket server;
    private static Scanner in;
    private static OutputStreamWriter out;
    
    public StartGUI() {
        initComponents();
        
        
    }
    
    public static void outPrintln(String str) {
        //write out
        try{
        out.write(str + "\r\n");
        out.flush();
        }
        catch(Exception e)
        {
            
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StartGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StartGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StartGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StartGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            
            @Override
            public void run() {
                try {
                    Thread.sleep(1000);
                } catch (Exception e) {
                    System.out.println(e);
                }
                StartGUI sg = new StartGUI();
                sg.setVisible(false);
                //first dialog
                ConnectionDialog cd = new ConnectionDialog(sg, true);
                cd.setVisible(true);
                try{
                    serverIP = InetAddress.getByName(cd.getIpAddress());
                    //do the same for port
                    serverPort = Integer.parseInt(cd.getPort());
                    //socket will be used by loginDialog and MainCelndarWindow
                    
                    //second dialog
                    LogInDialog lid = new LogInDialog(sg, true);
                    
                    lid.setVisible(true);
                    
                    try{
                        
                        String message = lid.getMESSAGE();
                        //create a socket, a scanner and an outputstreamwriter here so that other classes can use them
                        server = new Socket(serverIP, serverPort);
                    
                        in = new Scanner(server.getInputStream());
                    
                        out = new OutputStreamWriter(server.getOutputStream());
                        //write the command to the server either log in or new user
                        outPrintln(message);
                        
                        boolean newAccount = false;
                        String uname = "";
                        String pass = "";
                        if (message.startsWith("LOG IN")) {
                            //TODO: this code needs comments.
                            //login to the server
                            uname = lid.getUserName();
                            pass = lid.getPassword();
                            outPrintln(uname);
                            outPrintln(pass);
                            newAccount = false;
                            
                        } else if (message.startsWith("NEW USER")) {
                            //selected new user, obtain data
                            String newuname = lid.getNewUser();
                            String newpass = lid.getNewPass();
                            String confnewpass = lid.getConfrimPass();
                            outPrintln(newuname);
                            outPrintln(newpass);
                            outPrintln(confnewpass);
                            newAccount = true;
                        }
                        if (in.hasNextLine()) {
                            String line = in.nextLine();
                            //received OK from server
                            if (line.equals("LOGIN OK") || line.equals("NEW USER OK")) {
                                try {
                                    AudioInputStream audio = AudioSystem.getAudioInputStream(new File("C:\\ST.wav"));
                                    Clip clip = AudioSystem.getClip();
                                    clip.open(audio);
                                    clip.start();
                                } catch (Exception exc) {
                                    System.out.println(exc);
                                }
                                
                            }
                        }
                        if (newAccount){
                            //true for new user\
                            //start a main calendar window
                            MainCalendarWindow calendar = new MainCalendarWindow(server, out, in, uname, pass, true);
                            calendar.setVisible(true);
                            //start an update thread that will update the calendar
                            UpdateThread us = new UpdateThread(calendar, server, in );
                            us.start();
                        }
                        else{
                            //false for just login
                            //start a main calendar window
                            MainCalendarWindow calendar = new MainCalendarWindow(server, out, in, uname, pass, false);
                            calendar.setVisible(true);
                            //start an update thread that will update the calendar
                            UpdateThread us = new UpdateThread(calendar, server, in );
                            us.start();
                        }
                    }
                    catch (Exception e)
                    {
                        //catch lid's exceptions
                        System.out.println(e);
                    }
                }
                catch(Exception e){
                    //catch connection dialog exceptions
                    System.out.println(e);
                    System.exit(0);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
